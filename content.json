{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"java常用类","date":"2019-08-18T03:26:17.345Z","updated":"2019-08-17T08:00:09.992Z","comments":true,"path":"2019/08/18/java常用类/","link":"","permalink":"http://yoursite.com/2019/08/18/java常用类/","excerpt":"","text":"ajava常用类1、System简介： 1、属于java.lang包 2、不允许构建对象,本质是个单例模式 3、对外部定义的属性和环境变量的访问；加载文件和库的方法；还有快速复制数组的一部分的实用方法。 常用方法:11、static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length) 数组复制 参数: Object src 待复制的数组 int srcPos 从哪个位置开始复制 Object dest 复制之后存储数据的数组 int destPos 从哪个位置开始存储 int length 复制的长度 12、static long currentTimeMillis() 返回以毫秒为单位的当前时间,参照1970年1月1日8点0分0秒 13、 static void exit(int status) 停止当前正在运行的 Java 虚拟机 参数: int status 状态码 0代表立即停止 14、 static void gc() 建议运行垃圾回收器 注意: 1)java的垃圾回收指的是堆内存数据的清理 2)gc程序员无法把控 15、 static String getenv(String name) 获取指定的环境变量值 参数: String name 环境变量的名字 返回值: String 具体的环境变量的值 2、date简介：属于java.util包 表示当前基于系统环境和时区的标准时间,精确到毫秒 毫秒距离格林尼治标准时间(1970年1月1日0时0分0秒)的毫秒数 date构造方法：11、Date() 表示当前的系统时间,可以直接输出 date的常用方法11、long getTime() ​ 返回距离格林尼治标准时间的毫秒数（和System类中的currentTimeMillis效果一样） 3、Calendar简介：包java.util表示当前时间的抽象类 注：Calendar类虽然为抽象类，但可以作为上转型对象接收其子类对象 常用方法：11、 static Calendar getInstance() 获取当前类对象，使用默认时区和语言环境获得一个当前时间的对象 12、int get(int field) 返回当前时间对象指定的属性对应的值 参数: int field 传入的属性(年/月/日/时/分/秒) 返回值: int 具体的数值 注意: 1)月份从0开始,7代表8月份 2)HOUR时分为AM和PM的,15点是3点PM,HOUR_OF_DAY是二十四时制 13、void set(int year, int month, int date) 直接设置年月日 14、void set(int year, int month, int date, int hourOfDay, int minute) 直接设置年月日时分 15、 Date getTime() ​ 获取当前Canlendar对象对应的Date对象 4、simpleDateFormat简介：属于java.text包 简单时间格式化类,是DateFormat的子类. 用来格式化和解析日期,允许进行格式化（日期 -&gt; 文本）、解析（文本 -&gt; 日期）,文本是String,日期是Date 构造方法：11、SimpleDateFormat(String pattern) 使用给定的模式串来格式化日期或者解析文本 参数: String pattern 模式串 模式串按照一定的规则整合组织的特殊的字符串 y 年 yy—&gt; 19 yyy —&gt;019 yyyy-&gt;2019 M 月 MM —&gt; 08 M —&gt; 8 d 日 h/k 时 m 分 s 秒 SimpleDateFormat常用方法：11、 String format(Date date) 将一个 Date 对象按照模式串的格式格式化为一个时间字符串 参数: Date date 待格式化的时间对象 返回值: String date对象对应的时间按照模式串转为的字符串 12、Date parse(String str) 把参数中的字符串按照模式串的规则转为时间对象 注意: 显式的提供异常,需要在main上进行处理throws Exception 参数: String str 符合模式串要求的时间字符串 返回值: Date 转换生成的时间对象 5、Runtime简介： 包java.lang 每个 Java 程序都有一个 Runtime 类实例，构建和维护当前程序所在的环境.该类是对当前程序运行状态的抽象. Runtime对象不允许程序员构建,而且是惟一的,是典型的单例模式 常用方法：11、static Runtime getRuntime 获取Runtime对象 返回与当前 Java 应用程序相关的运行时对象 12、int availableProcessors() 返回当前处理器的核数 13、 void exit(int status) 和System的exit方法完全一致 14、 long freeMemory() 返回 Java 虚拟机中的空闲内存 15、long maxMemory() 返回 Java 虚拟机试图使用的最大内存 16、 long totalMemory() 返回 Java 虚拟机中的内存总量 注意:以字节为单位 17、void halt(int status) 强制关闭java虚拟机,status一般设置为0 6、Integer简介： 是int类型的包装类,是Number的子类 把int类型的基本数据类型作为当前类的一个属性 本质: private final int value; 构造方法：11、 Integer(int value) 构造一个新分配的 Integer 对象，它表示指定的 int 值 12、 Integer(String s) 允许把一个String字符串转为Integer类型. 注意: 该字符串必须是整数字符串,否则报错 常用方法：11、 int intValue() ​ 把当前的Integer对象转回基本数据类型int. 12、 static int parseInt(String s) ​ 把整数字符串转为一个基本数据类型int 13、static Integer valueOf(String s) ​ 把整数字符串转为一个Integer类型 7、Math简介： 数学类,包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数 构造方法被私有化了,提供很多static修饰的静态方法—-&gt;工具类 属性：11、 static double PI 数学中的π值 常用方法：11、static int abs(int a) 返回 int 值的绝对值 12、static double ceil(double a) 获取大于a这个数的最小的整数,向上取整 4.9 —&gt; 5 1.00001 —-&gt; 2 13、static double floor(double a) 获取小于a这个数的最大的整数,向下取整 4.1 —-&gt; 4 5.9 —-&gt; 5 14、 static double pow(double a, double b) 返回第一个参数的第二个参数次幂的值 15、 static double random() 获取在[0,1)之间的随机数,该值大于等于 0.0 且小于 1 16、static int round(float a) 返回最接近参数的 int,四舍五入 17、 static double sqrt(double a) 返回一个数字的平方根 8、UUID简介：十六进制的随机数的字符串,该字符串绝对不可能重复,当前系统内唯一的随机数. UUID的使用：1、获取随机数的对象 1static UUID randomUUID() 获取一个十六进制的随机数的对象 获取一个十六进制的随机数的对象 2、把随机数对象以字符串的方式展现 1String toString() 返回表示此 UUID 的 String 对象 返回表示此 UUID 的 String 对象 9、Random简介：包java.util 此类的对象用于生成伪随机数。此类使用 48 位的种子，使用函数生成的一组随机数. 伪随机数 基于种子生成的随机数都叫伪随机,根据种子数x+函数可以推测出y的值,如果两次随机的时候种子数相同,得到的随 机数可能是相同的 种子 seed,是一段存储特征的信息,包括番号,热度,帧点 random的种子中有一个数字,是函数的一个解,是在初始化随机数对象的时候,由random 根据线性同余方程自动生成 构造方法：11、 Random() 创建一个新的随机数生成器,自动生成的种子 12、Random(long seed) 使用单个 long 种子创建一个新的随机数生成器,程序员提供的种子 常用方法：11、int nextInt() 返回下一个伪随机数，数值的范围在-2^31~2^31-1之间 12、 int nextInt(int n) 返回一个伪随机数，数值的范围是[0,n),包含0不包含n 10、Arrays简介：此类包含用来操作数组（比如排序和搜索）的各种方法,可以对数组进行加工处理,是一个工具类 常用方法：11、 static int binarySearch(int[] a, int fromIndex, int toIndex, int key) 使用二分搜索法来搜索指定的 int 型数组的范围，以获得指定的值 参数: int[] a 待遍历查找的数组 int fromIndex 从哪个位置开始查找 int toIndex 到哪个位置停止查找 int key 待查找的元素 返回值: int 找到了指定的元素key,返回key的下标 找不到指定的元素key,返回的-(low + 1)的值 12、 static void sort(int[] a, int fromIndex, int toIndex) 对指定 int 型数组的指定范围按数字升序进行排序 参数: int[] a 待排序的数组 int fromIndex 从哪个位置开始排序 int toIndex 到哪个位置停止排序 13、static String toString(int[] a) 快速遍历数组的一种方式,把数组里面的元素直接输出 11、Throwable简介：Throwable 类是 Java 语言中所有错误或异常的父类。 有两个子类，Error 和 Exception. Error 是 Throwable的子类,还是所有的错误类的父类 Exception 是Throwable的子类,还是所有的异常类的父类 构造方法：11、Throwable() 构造一个将 null 作为其详细消息的throwable对象 12、 Throwable(String message) 构造带指定详细消息的throwable对象 参数: String message 是遭遇异常的时候显示的异常的信息 常用方法： 11、String getMessage() 返回在构建异常对象的时候传入的String message的信息 12、void printStackTrace() 以红色的err的输出方式,把遇到的错误和异常信息输出到console里面 包含的不仅仅是异常或者是错误的信息,还包含更为详细的信息,具体哪行代码有问题,甚至因为哪些问题引发的异常以及当前的异常引发的其他的一些问题 官方推荐使用这种方式查看异常信息 12、ArrayList简介：属于java.util包底层基于Object类型的数组的实现,支持使用泛型自己指定的数据类型,提供了一些对于底层数据的访问的方法(增 删改查) 本质: 存放具体数据的数组 Object[] elementData; 数组长度 int size; 构造方法：11、ArrayList() 在1.8版本之前,构造一个长度为 10 的空对象数组 在1.8版本之后,构造一个长度为 0 的空对象数组,当第一个元素添加进去的时候,默认的数组就会被替换. 12、 ArrayList(int initialCapacity) 构造一个具有指定初始容量的空对象数组 常用方法：11、 boolean add(E e) 将指定的元素添加到ArrayList的尾部 注：第一个元素添加的时候的操作​ 使用空的构造方法构建的ArrayList是一个空的数组,第一个元素添加的时候​ 会触发自动扩容的算法,把指定的默认的长度10设置为当前的数组的长度 12、 void add(int index, E element) 将指定的元素插入ArrayList的指定位置 int index 必须&gt;=0 注意: 先保证ArrayList的容量不是0才可以添加元素,否则下标越界，即使在容量范围之内，下标也不可超过列表的实际长度 13、 void clear() 移除此列表中的所有元素 14、 E remove(int index) 移除ArrayList中指定位置上的元素,并且把这个元素返回 15、E set(int index, E element) 用指定的元素替代ArrayList中指定位置上的元素,并且把替换之前的元素返回 16、 int size() ​ 返回此列表中的元素个数,就是size属性的get方法 17、Object[] toArray() ​ 按从第一个到最后一个元素的顺序返回包含当前集合中所有元素的组成的数组 18、void trimToSize() ​ 将此 ArrayList的容量调整为数组中元素的个数​ 一般在集合稳定之后使用,节约空间 13、linkedList简介： 属于java.util包 基于链表结构的集合实现,大量的方法在功能上和ArrayList相同,代码的差异性很大 是双向的链表结构,有prev指向上一个节点,有next指向下一个节点 构造方法：1、LinkedList() 构造一个空链表结构 链表结构： Node 节点 链表是节点按照一定的顺序组合生成的一串数据,藤壶 节点源码：1234567class Node&lt;E&gt; &#123; //存放具体数据的对象 E item; //下一个节点的信息 Node&lt;E&gt; next; //上一个节点的信息 Node&lt;E&gt; prev; Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) { this.item = element; this.next = next; this.prev = prev; } } 记录节点的个数: int size = 0;常用方法：添加链表节点11、boolean add(E e) 将指定元素添加到此列表的结尾。 12、void add(int index, E element) 在此列表中指定的位置插入指定的元素。 在此列表中指定的位置插入指定的元素。 13、void addFirst(E e) ​ 将指定元素插入此列表的开头 14、 void addLast(E e) ​ 将指定元素添加到此列表的结尾 15、void clear() ​ 从此列表中移除所有元素 源码实现： 123456789101112public void clear() &#123; for (Node&lt;E&gt; x = first; x != null; ) &#123; Node&lt;E&gt; next = x.next; x.item = null; x.next = null; x.prev = null; x = next; &#125; first = last = null; size = 0; modCount++; &#125; 获取链表节点：126、 E element() E getFirst() ​ 获取此列表的第一个元素 17、 E get(int index) ​ 返回此列表中指定位置处的元素 18、 E getLast() ​ 返回此列表的最后一个元素 移除链表节点129、E remove() E removeFirst() ​ 获取并移除此列表的第一个元素 110、E remove(int index) ​ 移除此列表中指定位置处的元素 111、 E removeLast() ​ 移除并返回此列表的最后一个元素 112、E set(int index, E element) ​ 将此列表中指定位置的元素替换为指定的元素 113、 int size() 返回此列表的元素数 114、 Object[] toArray() 返回从第一个元素到最后一个元素包含此列表中所有元素的数组 重点： LinkedList和ArrayList的区别 1)查询 get(int i) 80% 2)修改 set(int i,E e) 3)删除 remove(int i)​ 删除最后一个元素 55开​ 删除第一个元素 ll 优势明显 4)添加 add(E e) 在末尾添加元素 al 可能需要扩容,性能下降 ll 性能很不错 在头部添加元素 al 可能需要扩容,所有的元素都要后移,性能下降 ll 性能很不错 5)存储 al 数组,占据一整块连续的存储空间 ll 节点,散列在堆内存,内存利用率有所提升 6)安全性 gc al 可能会被整体回收 ll 数据安全性比较高 14、HashMap简介：属于java.util包 支持两个泛型,使用K和V表示,K是key的缩写,是键,V是value的缩写,是值 HashMap称为键值对 基于哈希表的 Map 接口的实现。并允许使用 null 值和 null 键。不保证映射的顺序，特别是它不保证该顺序恒久不变—- 如果存放数据的时候是AB,读取的时候可能是BA 桶 容器的概念,存放数据的容器,把存放数据的HashMap集合称为桶 初始容量 容器起始的容积,起始存放的最大元素个数 加载因子 类似于容器扩容的比例,最优的加载因子是75%,也就是0.75 构造方法：11、HashMap() 构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 HashMap 12、HashMap(int initialCapacity) 构造一个带指定初始容量和默认加载因子 (0.75) 的空 HashMap 注： 1)V的类型任意,K的类型只允许是String类型或者Integer类型 2)采用&lt;Integer,String&gt;设置多个泛型 源码: //当前集合的容积 int threshold; //加载因子 final float loadFactor; //node节点的个数 int size; //存放节点的数组,HashMap的本质 Node&lt;K,V&gt;[] table; 常用方法：11、 V put(K key, V value) 把指定的键值对添加/修改到当前集合 注意: 1)如果之前没有这个key,添加到集合;如果之前有key,修改集合里面的值 2)key是惟一的,value允许重复 源码实现： 123456789101112public class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final int hash; final K key; V value; Node&lt;K,V&gt; next; Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; this.hash = hash; this.key = key; this.value = value; this.next = next; &#125; &#125; 12、 void clear() 从此映射中移除所有映射关系 13、 boolean containsKey(Object key) 如果此映射包含对于指定键的映射关系，则返回 true。 14、boolean containsValue(Object value) 如果此映射将一个或多个键映射到指定值，则返回 true。 15、 V get(Object key) ​ 返回指定键所映射的值；如果没有这个key,则返回 null 16、boolean isEmpty() 如果此映射不包含键-值映射关系，则返回 true 17、V remove(Object key) 从此映射中移除指定键的映射关系 移除的时候,把KV对一起移除掉 18、 int size() 返回此映射中的键-值映射关系数 19、 Collection&lt;V&gt; values() 返回此映射所包含的值的 Collection 视图 Map全系没有迭代器iterator,无法使用迭代器遍历,Collection全系有迭代器, 所有的key丢失,只有value的集合","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-08-17T09:37:29.864Z","updated":"2019-08-17T09:37:29.867Z","comments":true,"path":"2019/08/17/hello-world/","link":"","permalink":"http://yoursite.com/2019/08/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}